{"ast":null,"code":"// api/tmdb.js\nimport axios from 'axios';\nconst API_KEY = 'd0d79eb2a003c31938434d703d0cfc10'; // Consider using environment variables in production\n\nconst tmdb = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  params: {\n    api_key: API_KEY,\n    language: 'en-US' // Default language\n  },\n  timeout: 5000 // Set timeout for requests\n});\n\n// Helper function to handle errors\nconst handleError = error => {\n  if (error.response) {\n    // The request was made and the server responded with a status code\n    console.error('API Error:', error.response.status, error.response.data);\n    throw new Error(error.response.data.status_message || 'API request failed');\n  } else if (error.request) {\n    // The request was made but no response was received\n    console.error('API Error: No response received', error.request);\n    throw new Error('Network error - no response from server');\n  } else {\n    // Something happened in setting up the request\n    console.error('API Error:', error.message);\n    throw new Error('API request setup error');\n  }\n};\n\n// API endpoints\nconst tmdbAPI = {\n  // Trending movies\n  getTrending: async (timeWindow = 'week') => {\n    try {\n      const response = await tmdb.get(`/trending/movie/${timeWindow}`);\n      return response.data;\n    } catch (error) {\n      handleError(error);\n    }\n  },\n  // Movie search\n  searchMovies: async (query, page = 1) => {\n    try {\n      const response = await tmdb.get('/search/movie', {\n        params: {\n          query,\n          page,\n          include_adult: false // Exclude adult content by default\n        }\n      });\n      return response.data;\n    } catch (error) {\n      handleError(error);\n    }\n  },\n  // Movie details\n  getMovieDetails: async id => {\n    try {\n      const response = await tmdb.get(`/movie/${id}`, {\n        params: {\n          append_to_response: 'videos,credits,similar' // Get additional data\n        }\n      });\n      return response.data;\n    } catch (error) {\n      handleError(error);\n    }\n  },\n  // Movie genres\n  getGenres: async () => {\n    try {\n      const response = await tmdb.get('/genre/movie/list');\n      return response.data.genres;\n    } catch (error) {\n      handleError(error);\n    }\n  },\n  // Popular movies\n  getPopular: async (page = 1) => {\n    try {\n      const response = await tmdb.get('/movie/popular', {\n        params: {\n          page\n        }\n      });\n      return response.data;\n    } catch (error) {\n      handleError(error);\n    }\n  },\n  // Configuration (for image URLs)\n  getConfiguration: async () => {\n    try {\n      const response = await tmdb.get('/configuration');\n      return response.data;\n    } catch (error) {\n      handleError(error);\n    }\n  }\n};\nexport default tmdbAPI;","map":{"version":3,"names":["axios","API_KEY","tmdb","create","baseURL","params","api_key","language","timeout","handleError","error","response","console","status","data","Error","status_message","request","message","tmdbAPI","getTrending","timeWindow","get","searchMovies","query","page","include_adult","getMovieDetails","id","append_to_response","getGenres","genres","getPopular","getConfiguration"],"sources":["C:/Users/DARSHAN/Documents/Movie Explorer/movie-explorer/src/api/tmdb.js"],"sourcesContent":["// api/tmdb.js\r\nimport axios from 'axios';\r\n\r\nconst API_KEY = 'd0d79eb2a003c31938434d703d0cfc10'; // Consider using environment variables in production\r\n\r\nconst tmdb = axios.create({\r\n  baseURL: 'https://api.themoviedb.org/3',\r\n  params: {\r\n    api_key: API_KEY,\r\n    language: 'en-US', // Default language\r\n  },\r\n  timeout: 5000, // Set timeout for requests\r\n});\r\n\r\n// Helper function to handle errors\r\nconst handleError = (error) => {\r\n  if (error.response) {\r\n    // The request was made and the server responded with a status code\r\n    console.error('API Error:', error.response.status, error.response.data);\r\n    throw new Error(error.response.data.status_message || 'API request failed');\r\n  } else if (error.request) {\r\n    // The request was made but no response was received\r\n    console.error('API Error: No response received', error.request);\r\n    throw new Error('Network error - no response from server');\r\n  } else {\r\n    // Something happened in setting up the request\r\n    console.error('API Error:', error.message);\r\n    throw new Error('API request setup error');\r\n  }\r\n};\r\n\r\n// API endpoints\r\nconst tmdbAPI = {\r\n  // Trending movies\r\n  getTrending: async (timeWindow = 'week') => {\r\n    try {\r\n      const response = await tmdb.get(`/trending/movie/${timeWindow}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      handleError(error);\r\n    }\r\n  },\r\n\r\n  // Movie search\r\n  searchMovies: async (query, page = 1) => {\r\n    try {\r\n      const response = await tmdb.get('/search/movie', {\r\n        params: {\r\n          query,\r\n          page,\r\n          include_adult: false, // Exclude adult content by default\r\n        },\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      handleError(error);\r\n    }\r\n  },\r\n\r\n  // Movie details\r\n  getMovieDetails: async (id) => {\r\n    try {\r\n      const response = await tmdb.get(`/movie/${id}`, {\r\n        params: {\r\n          append_to_response: 'videos,credits,similar', // Get additional data\r\n        },\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      handleError(error);\r\n    }\r\n  },\r\n\r\n  // Movie genres\r\n  getGenres: async () => {\r\n    try {\r\n      const response = await tmdb.get('/genre/movie/list');\r\n      return response.data.genres;\r\n    } catch (error) {\r\n      handleError(error);\r\n    }\r\n  },\r\n\r\n  // Popular movies\r\n  getPopular: async (page = 1) => {\r\n    try {\r\n      const response = await tmdb.get('/movie/popular', { params: { page } });\r\n      return response.data;\r\n    } catch (error) {\r\n      handleError(error);\r\n    }\r\n  },\r\n\r\n  // Configuration (for image URLs)\r\n  getConfiguration: async () => {\r\n    try {\r\n      const response = await tmdb.get('/configuration');\r\n      return response.data;\r\n    } catch (error) {\r\n      handleError(error);\r\n    }\r\n  },\r\n};\r\n\r\nexport default tmdbAPI;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}