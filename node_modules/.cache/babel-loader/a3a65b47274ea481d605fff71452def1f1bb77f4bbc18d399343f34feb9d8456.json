{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DARSHAN\\\\Documents\\\\Movie Explorer\\\\movie-explorer\\\\src\\\\context\\\\MovieContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// src/context/MovieContext.jsx\nimport React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\nimport { useAuth } from './AuthContext';\nimport { toast } from 'react-toastify'; // Consider using toast notifications\nimport PropTypes from 'prop-types'; // For prop type validation\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MovieContext = /*#__PURE__*/createContext();\nexport const useMovie = () => {\n  _s();\n  const context = useContext(MovieContext);\n  if (!context) {\n    throw new Error('useMovie must be used within a MovieProvider');\n  }\n  return context;\n};\n_s(useMovie, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const MovieProvider = ({\n  children\n}) => {\n  _s2();\n  const {\n    isAuthenticated,\n    currentUser\n  } = useAuth();\n  const [movies, setMovies] = useState([]);\n  const [favorites, setFavorites] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Initialize favorites from localStorage\n  useEffect(() => {\n    try {\n      const storedFavorites = localStorage.getItem(`favorites_${currentUser === null || currentUser === void 0 ? void 0 : currentUser.id}`);\n      if (storedFavorites) {\n        setFavorites(JSON.parse(storedFavorites));\n      }\n    } catch (err) {\n      console.error('Failed to parse favorites from localStorage', err);\n      setError('Failed to load your favorites');\n    }\n  }, [currentUser]);\n\n  // Save favorites to localStorage when they change\n  useEffect(() => {\n    if (currentUser) {\n      try {\n        localStorage.setItem(`favorites_${currentUser.id}`, JSON.stringify(favorites));\n      } catch (err) {\n        console.error('Failed to save favorites to localStorage', err);\n        setError('Failed to save your favorites');\n      }\n    }\n  }, [favorites, currentUser]);\n  const toggleFavorite = useCallback(movie => {\n    if (!isAuthenticated) {\n      toast.warning('Please log in to manage your favorites');\n      return;\n    }\n    setFavorites(prevFavorites => {\n      const isFavorite = prevFavorites.some(m => m.id === movie.id);\n      let updatedFavorites;\n      if (isFavorite) {\n        updatedFavorites = prevFavorites.filter(m => m.id !== movie.id);\n        toast.success('Removed from favorites');\n      } else {\n        updatedFavorites = [...prevFavorites, movie];\n        toast.success('Added to favorites');\n      }\n      return updatedFavorites;\n    });\n  }, [isAuthenticated]);\n  const isFavorite = useCallback(movieId => {\n    return favorites.some(movie => movie.id === movieId);\n  }, [favorites]);\n  const clearFavorites = useCallback(() => {\n    if (window.confirm('Are you sure you want to clear all favorites?')) {\n      setFavorites([]);\n      toast.info('Favorites cleared');\n    }\n  }, []);\n  const value = {\n    movies,\n    setMovies,\n    favorites,\n    toggleFavorite,\n    isFavorite,\n    clearFavorites,\n    loading,\n    setLoading,\n    error,\n    setError\n  };\n  return /*#__PURE__*/_jsxDEV(MovieContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n};\n_s2(MovieProvider, \"QM4cCagw0hfS5lU2YcV3yCQun/E=\", false, function () {\n  return [useAuth];\n});\n_c = MovieProvider;\nMovieProvider.propTypes = {\n  children: PropTypes.node.isRequired\n};\nvar _c;\n$RefreshReg$(_c, \"MovieProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useCallback","useAuth","toast","PropTypes","jsxDEV","_jsxDEV","MovieContext","useMovie","_s","context","Error","MovieProvider","children","_s2","isAuthenticated","currentUser","movies","setMovies","favorites","setFavorites","loading","setLoading","error","setError","storedFavorites","localStorage","getItem","id","JSON","parse","err","console","setItem","stringify","toggleFavorite","movie","warning","prevFavorites","isFavorite","some","m","updatedFavorites","filter","success","movieId","clearFavorites","window","confirm","info","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","propTypes","node","isRequired","$RefreshReg$"],"sources":["C:/Users/DARSHAN/Documents/Movie Explorer/movie-explorer/src/context/MovieContext.jsx"],"sourcesContent":["// src/context/MovieContext.jsx\r\nimport React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\r\nimport { useAuth } from './AuthContext';\r\nimport { toast } from 'react-toastify'; // Consider using toast notifications\r\nimport PropTypes from 'prop-types'; // For prop type validation\r\n\r\nconst MovieContext = createContext();\r\n\r\nexport const useMovie = () => {\r\n  const context = useContext(MovieContext);\r\n  if (!context) {\r\n    throw new Error('useMovie must be used within a MovieProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const MovieProvider = ({ children }) => {\r\n  const { isAuthenticated, currentUser } = useAuth();\r\n  const [movies, setMovies] = useState([]);\r\n  const [favorites, setFavorites] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Initialize favorites from localStorage\r\n  useEffect(() => {\r\n    try {\r\n      const storedFavorites = localStorage.getItem(`favorites_${currentUser?.id}`);\r\n      if (storedFavorites) {\r\n        setFavorites(JSON.parse(storedFavorites));\r\n      }\r\n    } catch (err) {\r\n      console.error('Failed to parse favorites from localStorage', err);\r\n      setError('Failed to load your favorites');\r\n    }\r\n  }, [currentUser]);\r\n\r\n  // Save favorites to localStorage when they change\r\n  useEffect(() => {\r\n    if (currentUser) {\r\n      try {\r\n        localStorage.setItem(`favorites_${currentUser.id}`, JSON.stringify(favorites));\r\n      } catch (err) {\r\n        console.error('Failed to save favorites to localStorage', err);\r\n        setError('Failed to save your favorites');\r\n      }\r\n    }\r\n  }, [favorites, currentUser]);\r\n\r\n  const toggleFavorite = useCallback((movie) => {\r\n    if (!isAuthenticated) {\r\n      toast.warning('Please log in to manage your favorites');\r\n      return;\r\n    }\r\n\r\n    setFavorites(prevFavorites => {\r\n      const isFavorite = prevFavorites.some(m => m.id === movie.id);\r\n      let updatedFavorites;\r\n\r\n      if (isFavorite) {\r\n        updatedFavorites = prevFavorites.filter(m => m.id !== movie.id);\r\n        toast.success('Removed from favorites');\r\n      } else {\r\n        updatedFavorites = [...prevFavorites, movie];\r\n        toast.success('Added to favorites');\r\n      }\r\n\r\n      return updatedFavorites;\r\n    });\r\n  }, [isAuthenticated]);\r\n\r\n  const isFavorite = useCallback((movieId) => {\r\n    return favorites.some(movie => movie.id === movieId);\r\n  }, [favorites]);\r\n\r\n  const clearFavorites = useCallback(() => {\r\n    if (window.confirm('Are you sure you want to clear all favorites?')) {\r\n      setFavorites([]);\r\n      toast.info('Favorites cleared');\r\n    }\r\n  }, []);\r\n\r\n  const value = {\r\n    movies,\r\n    setMovies,\r\n    favorites,\r\n    toggleFavorite,\r\n    isFavorite,\r\n    clearFavorites,\r\n    loading,\r\n    setLoading,\r\n    error,\r\n    setError\r\n  };\r\n\r\n  return (\r\n    <MovieContext.Provider value={value}>\r\n      {children}\r\n    </MovieContext.Provider>\r\n  );\r\n};\r\n\r\nMovieProvider.propTypes = {\r\n  children: PropTypes.node.isRequired\r\n};"],"mappings":";;;AAAA;AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AAC1F,SAASC,OAAO,QAAQ,eAAe;AACvC,SAASC,KAAK,QAAQ,gBAAgB,CAAC,CAAC;AACxC,OAAOC,SAAS,MAAM,YAAY,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEpC,MAAMC,YAAY,gBAAGV,aAAa,CAAC,CAAC;AAEpC,OAAO,MAAMW,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAMC,OAAO,GAAGZ,UAAU,CAACS,YAAY,CAAC;EACxC,IAAI,CAACG,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,8CAA8C,CAAC;EACjE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,EAAA,CANWD,QAAQ;AAQrB,OAAO,MAAMI,aAAa,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC7C,MAAM;IAAEC,eAAe;IAAEC;EAAY,CAAC,GAAGd,OAAO,CAAC,CAAC;EAClD,MAAM,CAACe,MAAM,EAAEC,SAAS,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACoB,SAAS,EAAEC,YAAY,CAAC,GAAGrB,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACsB,OAAO,EAAEC,UAAU,CAAC,GAAGvB,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACwB,KAAK,EAAEC,QAAQ,CAAC,GAAGzB,QAAQ,CAAC,IAAI,CAAC;;EAExC;EACAC,SAAS,CAAC,MAAM;IACd,IAAI;MACF,MAAMyB,eAAe,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAaX,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEY,EAAE,EAAE,CAAC;MAC5E,IAAIH,eAAe,EAAE;QACnBL,YAAY,CAACS,IAAI,CAACC,KAAK,CAACL,eAAe,CAAC,CAAC;MAC3C;IACF,CAAC,CAAC,OAAOM,GAAG,EAAE;MACZC,OAAO,CAACT,KAAK,CAAC,6CAA6C,EAAEQ,GAAG,CAAC;MACjEP,QAAQ,CAAC,+BAA+B,CAAC;IAC3C;EACF,CAAC,EAAE,CAACR,WAAW,CAAC,CAAC;;EAEjB;EACAhB,SAAS,CAAC,MAAM;IACd,IAAIgB,WAAW,EAAE;MACf,IAAI;QACFU,YAAY,CAACO,OAAO,CAAC,aAAajB,WAAW,CAACY,EAAE,EAAE,EAAEC,IAAI,CAACK,SAAS,CAACf,SAAS,CAAC,CAAC;MAChF,CAAC,CAAC,OAAOY,GAAG,EAAE;QACZC,OAAO,CAACT,KAAK,CAAC,0CAA0C,EAAEQ,GAAG,CAAC;QAC9DP,QAAQ,CAAC,+BAA+B,CAAC;MAC3C;IACF;EACF,CAAC,EAAE,CAACL,SAAS,EAAEH,WAAW,CAAC,CAAC;EAE5B,MAAMmB,cAAc,GAAGlC,WAAW,CAAEmC,KAAK,IAAK;IAC5C,IAAI,CAACrB,eAAe,EAAE;MACpBZ,KAAK,CAACkC,OAAO,CAAC,wCAAwC,CAAC;MACvD;IACF;IAEAjB,YAAY,CAACkB,aAAa,IAAI;MAC5B,MAAMC,UAAU,GAAGD,aAAa,CAACE,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACb,EAAE,KAAKQ,KAAK,CAACR,EAAE,CAAC;MAC7D,IAAIc,gBAAgB;MAEpB,IAAIH,UAAU,EAAE;QACdG,gBAAgB,GAAGJ,aAAa,CAACK,MAAM,CAACF,CAAC,IAAIA,CAAC,CAACb,EAAE,KAAKQ,KAAK,CAACR,EAAE,CAAC;QAC/DzB,KAAK,CAACyC,OAAO,CAAC,wBAAwB,CAAC;MACzC,CAAC,MAAM;QACLF,gBAAgB,GAAG,CAAC,GAAGJ,aAAa,EAAEF,KAAK,CAAC;QAC5CjC,KAAK,CAACyC,OAAO,CAAC,oBAAoB,CAAC;MACrC;MAEA,OAAOF,gBAAgB;IACzB,CAAC,CAAC;EACJ,CAAC,EAAE,CAAC3B,eAAe,CAAC,CAAC;EAErB,MAAMwB,UAAU,GAAGtC,WAAW,CAAE4C,OAAO,IAAK;IAC1C,OAAO1B,SAAS,CAACqB,IAAI,CAACJ,KAAK,IAAIA,KAAK,CAACR,EAAE,KAAKiB,OAAO,CAAC;EACtD,CAAC,EAAE,CAAC1B,SAAS,CAAC,CAAC;EAEf,MAAM2B,cAAc,GAAG7C,WAAW,CAAC,MAAM;IACvC,IAAI8C,MAAM,CAACC,OAAO,CAAC,+CAA+C,CAAC,EAAE;MACnE5B,YAAY,CAAC,EAAE,CAAC;MAChBjB,KAAK,CAAC8C,IAAI,CAAC,mBAAmB,CAAC;IACjC;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,KAAK,GAAG;IACZjC,MAAM;IACNC,SAAS;IACTC,SAAS;IACTgB,cAAc;IACdI,UAAU;IACVO,cAAc;IACdzB,OAAO;IACPC,UAAU;IACVC,KAAK;IACLC;EACF,CAAC;EAED,oBACElB,OAAA,CAACC,YAAY,CAAC4C,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAArC,QAAA,EACjCA;EAAQ;IAAAuC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACY,CAAC;AAE5B,CAAC;AAACzC,GAAA,CAnFWF,aAAa;EAAA,QACiBV,OAAO;AAAA;AAAAsD,EAAA,GADrC5C,aAAa;AAqF1BA,aAAa,CAAC6C,SAAS,GAAG;EACxB5C,QAAQ,EAAET,SAAS,CAACsD,IAAI,CAACC;AAC3B,CAAC;AAAC,IAAAH,EAAA;AAAAI,YAAA,CAAAJ,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}