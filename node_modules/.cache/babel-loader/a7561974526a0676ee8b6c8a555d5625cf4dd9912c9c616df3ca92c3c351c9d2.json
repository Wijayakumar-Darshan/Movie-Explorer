{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DARSHAN\\\\Documents\\\\Movie Explorer\\\\movie-explorer\\\\src\\\\pages\\\\MoviePage.jsx\",\n  _s = $RefreshSig$();\n// src/pages/MoviePage.jsx\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport tmdb from '../api/tmdb';\nimport { Typography, Container } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function MoviePage() {\n  _s();\n  var _movie$videos, _movie$videos$results;\n  const {\n    id\n  } = useParams();\n  const [movie, setMovie] = useState(null);\n  useEffect(() => {\n    const fetchDetails = async () => {\n      const res = await tmdb.get(`/movie/${id}`, {\n        params: {\n          append_to_response: 'videos,credits'\n        }\n      });\n      setMovie(res.data);\n    };\n    fetchDetails();\n  }, [id]);\n  if (!movie) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 22\n  }, this);\n  const trailer = (_movie$videos = movie.videos) === null || _movie$videos === void 0 ? void 0 : (_movie$videos$results = _movie$videos.results) === null || _movie$videos$results === void 0 ? void 0 : _movie$videos$results.find(v => v.type === 'Trailer');\n  return /*#__PURE__*/_jsxDEV(Container, {\n    sx: {\n      mt: 4\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h3\",\n      children: movie.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"body1\",\n      sx: {\n        my: 2\n      },\n      children: movie.overview\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), trailer && /*#__PURE__*/_jsxDEV(\"iframe\", {\n      width: \"560\",\n      height: \"315\",\n      src: `https://www.youtube.com/embed/${trailer.key}`,\n      title: \"Trailer\",\n      frameBorder: \"0\",\n      allowFullScreen: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n}\n_s(MoviePage, \"2DI+WM1NP8orkt5lpnG0LvHIzCE=\", false, function () {\n  return [useParams];\n});\n_c = MoviePage;\nvar _c;\n$RefreshReg$(_c, \"MoviePage\");","map":{"version":3,"names":["React","useEffect","useState","useParams","tmdb","Typography","Container","jsxDEV","_jsxDEV","MoviePage","_s","_movie$videos","_movie$videos$results","id","movie","setMovie","fetchDetails","res","get","params","append_to_response","data","children","fileName","_jsxFileName","lineNumber","columnNumber","trailer","videos","results","find","v","type","sx","mt","variant","title","my","overview","width","height","src","key","frameBorder","allowFullScreen","_c","$RefreshReg$"],"sources":["C:/Users/DARSHAN/Documents/Movie Explorer/movie-explorer/src/pages/MoviePage.jsx"],"sourcesContent":["// src/pages/MoviePage.jsx\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport tmdb from '../api/tmdb';\r\nimport { Typography, Container } from '@mui/material';\r\n\r\nexport default function MoviePage() {\r\n  const { id } = useParams();\r\n  const [movie, setMovie] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchDetails = async () => {\r\n      const res = await tmdb.get(`/movie/${id}`, {\r\n        params: { append_to_response: 'videos,credits' }\r\n      });\r\n      setMovie(res.data);\r\n    };\r\n    fetchDetails();\r\n  }, [id]);\r\n\r\n  if (!movie) return <p>Loading...</p>;\r\n\r\n  const trailer = movie.videos?.results?.find(v => v.type === 'Trailer');\r\n\r\n  return (\r\n    <Container sx={{ mt: 4 }}>\r\n      <Typography variant=\"h3\">{movie.title}</Typography>\r\n      <Typography variant=\"body1\" sx={{ my: 2 }}>{movie.overview}</Typography>\r\n      {trailer && (\r\n        <iframe\r\n          width=\"560\"\r\n          height=\"315\"\r\n          src={`https://www.youtube.com/embed/${trailer.key}`}\r\n          title=\"Trailer\"\r\n          frameBorder=\"0\"\r\n          allowFullScreen\r\n        ></iframe>\r\n      )}\r\n    </Container>\r\n  );\r\n}"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,OAAOC,IAAI,MAAM,aAAa;AAC9B,SAASC,UAAU,EAAEC,SAAS,QAAQ,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtD,eAAe,SAASC,SAASA,CAAA,EAAG;EAAAC,EAAA;EAAA,IAAAC,aAAA,EAAAC,qBAAA;EAClC,MAAM;IAAEC;EAAG,CAAC,GAAGV,SAAS,CAAC,CAAC;EAC1B,MAAM,CAACW,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EAExCD,SAAS,CAAC,MAAM;IACd,MAAMe,YAAY,GAAG,MAAAA,CAAA,KAAY;MAC/B,MAAMC,GAAG,GAAG,MAAMb,IAAI,CAACc,GAAG,CAAC,UAAUL,EAAE,EAAE,EAAE;QACzCM,MAAM,EAAE;UAAEC,kBAAkB,EAAE;QAAiB;MACjD,CAAC,CAAC;MACFL,QAAQ,CAACE,GAAG,CAACI,IAAI,CAAC;IACpB,CAAC;IACDL,YAAY,CAAC,CAAC;EAChB,CAAC,EAAE,CAACH,EAAE,CAAC,CAAC;EAER,IAAI,CAACC,KAAK,EAAE,oBAAON,OAAA;IAAAc,QAAA,EAAG;EAAU;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAG,CAAC;EAEpC,MAAMC,OAAO,IAAAhB,aAAA,GAAGG,KAAK,CAACc,MAAM,cAAAjB,aAAA,wBAAAC,qBAAA,GAAZD,aAAA,CAAckB,OAAO,cAAAjB,qBAAA,uBAArBA,qBAAA,CAAuBkB,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,IAAI,KAAK,SAAS,CAAC;EAEtE,oBACExB,OAAA,CAACF,SAAS;IAAC2B,EAAE,EAAE;MAAEC,EAAE,EAAE;IAAE,CAAE;IAAAZ,QAAA,gBACvBd,OAAA,CAACH,UAAU;MAAC8B,OAAO,EAAC,IAAI;MAAAb,QAAA,EAAER,KAAK,CAACsB;IAAK;MAAAb,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAa,CAAC,eACnDlB,OAAA,CAACH,UAAU;MAAC8B,OAAO,EAAC,OAAO;MAACF,EAAE,EAAE;QAAEI,EAAE,EAAE;MAAE,CAAE;MAAAf,QAAA,EAAER,KAAK,CAACwB;IAAQ;MAAAf,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAa,CAAC,EACvEC,OAAO,iBACNnB,OAAA;MACE+B,KAAK,EAAC,KAAK;MACXC,MAAM,EAAC,KAAK;MACZC,GAAG,EAAE,iCAAiCd,OAAO,CAACe,GAAG,EAAG;MACpDN,KAAK,EAAC,SAAS;MACfO,WAAW,EAAC,GAAG;MACfC,eAAe;IAAA;MAAArB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACR,CACV;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACQ,CAAC;AAEhB;AAAChB,EAAA,CAlCuBD,SAAS;EAAA,QAChBN,SAAS;AAAA;AAAA0C,EAAA,GADFpC,SAAS;AAAA,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}